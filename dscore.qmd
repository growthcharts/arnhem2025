---
title: "D-score"
---

```{r echo=FALSE, warning=FALSE, message = FALSE, results="hide"}
source("R/before_chapter_script.R")
opts_chunk$set(echo = FALSE, warning=FALSE)
```

:::{callout-note}
Bezoek eens D-score landing page: <https://d-score.org>
:::

## The Dutch Development Instrument (DDI) {#sec:ddi}

The *Dutch Development Instrument* (DDI; in Dutch: *Van Wiechenschema*) is the standard instrument used to measure development during the ages 0-4 years. The DDI consists of [75 milestones](https://www.ncj.nl/van-wiechen/kenmerken/). The instrument assesses three developmental domains:

1.  Fine motor, adaptation, personality and social behaviour;
2.  Communication;
3.  Gross motor.

The milestones form two [sets](https://www.ggdghorkennisnet.nl/?file=656&m=1310474916&action=file.download), one for children aged 0-15 months, and another for children aged 15-54 months. The YHC professionals administer an age-appropriate subset of milestones at each of the scheduled visits, thus building a *longitudinal developmental profile* for each child.

### Description of SMOCC study {#sec:smocc}

The Social Medical Survey of Children Attending Child Health Clinics (SMOCC) study is a nationally representative cohort of 2,151 children born in The Netherlands during the years 1988--1989 [@herngreen1994]. The study monitored child development using observations made on the DDI during nine visits covering the first 24 months of life. The SMOCC study collected information during the first two years on 57 (out of 75) milestones.

The *standard* set in the DDI consists of relatively easy milestones that 90 per cent of the children can pass at the scheduled age. This set is designed to have maximal sensitivity for picking up delays in development. A distinctive feature of the SMOCC study was the inclusion of more difficult milestones beyond the standard set. The *additional* set originates from the next time point. The success rate on these milestones is about 50 per cent.

### Codebook of DDI 0-30 months

```{r smoccmodel, cache=TRUE}
data <- get_data(cohorts = 53)
items <- dscore::get_itemnames(data)
varlist <- list(adm = c("cohort", "subjid", "agedays"), 
                items = items,
                cov = NULL)
model <- suppressWarnings(dmetric::fit_dmodel(varlist, data, name = "57_0"))
```

```{r smoccitems}
meta <- dscore::get_itemtable(dscore::get_itemnames(instrument = "ddi")) %>%
  bind_cols(decompose_itemnames(.$item)) %>%   
  dplyr::select(item, domain, label) %>%
  mutate(domain = plyr::revalue(domain, c("cm" = "Communication", 
                                          "fm" = "Fine motor",
                                          "gm" = "Gross motor")))
df <- data.frame(
  item = dscore::get_itemnames(data),
  debut = c(1, 2, 3, 5, 6, 6, 7, 8, 9, 10, 10,
            4, 7, 8, 9,
            1, 2, 3, 3, 4, 5, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10, 10, 
            4, 1, 1, 3, 4, 1, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 10, 9, 9), 
  stringsAsFactors = FALSE)
meta <- df %>%  
  left_join(meta, by = "item") %>% 
  mutate(
    itemorder = dscore::order_itemnames(item, order = "idnm"), 
    debut = factor(debut, 
                   labels = c("1m", "2m", "3m", "6m", "9m", "12m", "15m", "18m", "24m", "30m"))
  ) %>% 
  arrange(debut, itemorder) %>% 
  dplyr::select(item, debut, domain, label)

# calculate visit from data
# meta <- data$itm %>%
#   group_by(item) %>% 
#   summarize(min_age = min(agedays, na.rm = TRUE)) %>% 
#   mutate(visit = cut(min_age, 
#                     breaks = c(18, 43, 76, 149, 216, 320, 399, 481, 633, 800),
#                     labels = c("1m", "2m", "3m", "6m", "9m", "12m", "15m", "18m", "24m"),
#                     right = FALSE),
#          wave = as.integer(visit)) %>% 
#   arrange(wave) %>% 
#   dplyr::select(item, visit) %>% 
#   left_join(meta, by = "item")

# options(knitr.table.format = "html") 
# kbl(meta, 
#     caption = "Codebook of DDI as used in the SMOCC study",
#     row.names = FALSE, 
#     col.names = c("Item", "Debut", "Domain", "Label"),
#     align = c("l", "r", "l", "l"),
#     booktabs = TRUE) %>%
#   kable_styling(latex_options = "scale_down") %>%
#   column_spec(column = 1, monospace = TRUE) %>% 
#   scroll_box(width = "100%", height = "300px")
ft <- flextable(meta)
ft <- set_header_labels(ft,
                        item = "Item",
                        debut = "Debut",
                        domain = "Domain",
                        label = "Label")
ft <- set_caption(ft, "Codebook of DDI as used in the SMOCC study")
ft <- set_table_properties(ft, layout = "autofit", width = .9)
ft <- font(ft, j = 1, fontname = "Courier")
ft <- align(ft, j = 2, align = "right")
knit_print(ft)
```

<br>

Table \@ref(tab:smoccitems) shows the 57 milestones from the DDI for ages 0 - 30 months as administered in the SMOCC study. Items are sorted according to *debut*, the age at which the item appears in the DDI. The response to each milestone is either a PASS (1) or a FAIL (0). Children who did not pass a milestone at the debut age were re-measured on that milestone during the next visit. The process continued until the child passed the milestone.

## Probability of passing a milestone given age {#sec:probage}

```{r smoccpa}
#| label: fig-smoccpa
#| fig-cap: "Empirical percentage of passing against age (Source: SMOCC data, n = 2151, 9 occasions)"
#| fig-height: 5
#| fig-width: 7

# define data for rug plot
data_rug <- data$itm %>%
  mutate(agemos = round(12 * agedays / 365.25), 3) %>%
  dplyr::select(item, value, agemos)

# calculate summary statistics
pass <- data_rug %>%
  mutate(agegp = cut(.data$agemos, breaks = seq(0, 60, 1))) %>%
  tidyr::drop_na(agegp) %>% 
  group_by(item, agegp) %>%
  summarise(p = round(100 * mean(.data$value, na.rm = TRUE)),
            a = mean(.data$agemos, na.rm = TRUE),
            n = n(), 
            .groups = "drop") %>%
  left_join(dscore::get_itemtable(items = items), by = "item") %>% 
  bind_cols(decompose_itemnames(.$item)) %>% 
  filter(n >= 5) %>%
  arrange(.data$item, a) %>%
  mutate(domain = plyr::revalue(domain, c("cm" = "Communication", 
                                          "fm" = "Fine motor",
                                          "gm" = "Gross motor")))

plot <- ggplot(pass, aes(a, p, group = item, colour = domain,
                         label = label)) +
  scale_x_continuous("Age (in months)", limits = c(0, 30),
                     breaks = seq(0, 28, 4)) +
  scale_y_continuous("% pass", breaks = seq(0, 100, 20),
                     limits = c(0, 100)) + 
  geom_line(size = 0.3) + 
  geom_point(size = 1.0)  +
  theme(legend.position = "none")

# if rendering HTML, add plotly tooltips
# https://github.com/rstudio/bookdown/issues/168
if (opts_knit$get("rmarkdown.pandoc.to") == "html") {
  plot <- suppressWarnings(plotly::ggplotly(plot, tooltip = c("item", "label")))
}

plot
```

@fig-smoccpa summarizes the response obtained on each milestone as a curve against age. The percentage of pass scores increases with age for all milestones. Note that curves on the left have steeper slopes than those on the right, thus indicating that development is faster for younger children.

The domain determines the coloured (blue: gross motor, green: fine motor, red: communication). In general, domains are well mixed across age, though around some ages, e.g., at four months, multiple milestones from the same domain appear.

## Probability of passing a milestone given D-score {#sec:probd}

```{r smoccpd}
#| label: fig-smoccpd
#| fig-cap: "Empirical percentage of passing against the D-score (Source: SMOCC data, 2151 children, 9 occasions)."
#| fig-height: 5
#| fig-width: 7
modelb <- model$dscore
delta <- dscore::get_tau(model$items, key = "", itembank = model$itembank)
data2 <- data$itm %>%
  filter(item %in% items) %>%
  left_join(data$visit, by = c("subjid", "agedays")) %>%
  left_join(modelb, by = c("subjid", "agedays")) %>%
  dplyr::select(subjid, agedays, item, value, d)

pass <- data2 %>% 
  tidyr::drop_na("value", "d") %>%
  mutate(dgp = cut(.data$d, breaks = seq(0, 70, 1)),
         agemos = round(.data$agedays / 365.25 * 12, 3)) %>%
  tidyr::drop_na(dgp) %>% 
  group_by(dgp, item) %>%
  summarise(
    p = round(100 * mean(.data$value, na.rm = TRUE)),
    a = mean(.data$agemos, na.rm = TRUE),
    d = mean(.data$d, na.rm = TRUE),
    n = n(), 
    .groups = "drop")
pass <- pass %>%
  left_join(model$itemtable, by = "item") %>%
  bind_cols(decompose_itemnames(.$item)) %>% 
  arrange(.data$item, dgp) %>%
  dplyr::select(item, dgp, a, d, p, n, domain, label) %>%
  filter(n >= 10 & p > 0 & p < 100) %>%
  mutate(domain = plyr::revalue(domain, c("cm" = "Communication", 
                                          "fm" = "Fine motor",
                                          "gm" = "Gross motor")))

plot <- ggplot(pass, aes(d, p, group = item, colour = domain, 
                         label = label)) +
  scale_x_continuous(paste0("D-score (", model$name,")"),
                     limits = c(0, 70),
                     breaks = seq(0, 70, 10)) +
  scale_y_continuous("% pass", breaks = seq(0, 100, 20),
                     limits = c(0, 100)) +
  geom_line(size = 0.3) + 
  geom_point(size = 1.0) +
  theme(legend.position = "none")

if (opts_knit$get("rmarkdown.pandoc.to") == "html") {
 plot <- suppressWarnings(plotly::ggplotly(plot, tooltip = c("item", "label")))
}
plot
```

@fig-smoccpd is similar to Figure \@ref(fig:smoccpa), but with the horizontal axis replaced by the D-score. The D-score summarizes development into one number. See \@ref(sec:dscoreestimation) for a detailed explanation on how to calculate the D-score. The vertical axis with per cent pass is unchanged.

The percentage of successes increases with D-score for all milestones. In contrast to Figure \@ref(fig:smoccpa) all curves have a similar slope, a desirable property needed for an interval scale with a constant unit of measurement (c.f. Section \@ref(sec:unitbased)).

How can the relation between per cent pass and age be so different from the relation between per cent pass and the D-score? The next section explains the reason.

## Relation between age and the D-score {#sec:aged}

```{r smoccda, fig.cap = '(ref:smoccda)', fig.height = 6, warning = FALSE}
#| label: fig-smoccda
#| fig-cap: "Relation between child D-score and child age in a cohort of Dutch children."
#| fig-height: 6
#| fig-width: 7
reference <- dplyr::select(dscore::get_reference(), age, SDM2:SDP2) %>%
  mutate(month = age * 12) %>% 
  filter(month <= 30) %>%
  tidyr::gather(key = centile, value = d, -month, -age)
model$dscore$agemos <- round(model$dscore$agedays / 365.25 * 12, 3)
plot <-
  ggplot(reference, aes(x = month, y = d, group = centile)) +
  #  coord_fixed(ratio = 60/80 * 688/818) +
  scale_colour_manual(values = dmetric::get_palette("study", package = model$data_package),
                      na.value = "grey") +
  scale_x_continuous("Age (in months)",
                     limits = c(0, 30),
                     breaks = seq(0, 30, 6)) +
  scale_y_continuous(
    paste0("D-score (", model$name, ")"),
    breaks = seq(0, 70, 10),
    limits = c(-5, 75)
  ) +
  # geom_line(colour = get_palette("study", package = model$data_package)["GCDG-NLD-SMOCC"]) +
  geom_line(colour = "grey90") +
  geom_point(
    mapping = aes(
      x = agemos,
      y = d,
      group = cohort,
      colour = cohort
    ),
    data = model$dscore,
    size = 0.5,
    shape = 1
  ) +
  facet_wrap( ~ cohort, ncol = 4) +
  theme(legend.position = "none")
plot
```

@fig-smoccda shows that the relation between D-score and age is nonlinear. Development in the first year is more rapid than in the second year. During the first year, infants gain about 40$D$, whereas in the second year they gain about 20$D$. A similar change in growth rate occurs in length (first year: 23 cm, second year: 12 cm, for Dutch children).

```{r smoccdap, warning = FALSE}
#| label: fig-smoccdap
#| fig-cap: "3D-line graph illustrating the relation between passing, D-score and age."
#| fig-height: 6
#| fig-width: 7
if (opts_knit$get("rmarkdown.pandoc.to") == "html") {
  # model ICC curves D-score
  grid <- tidyr::crossing(
    item = items,
    d = seq(0, 70, 0.2))
  ib <- model$itembank %>%
    bind_cols(decompose_itemnames(.$item)) %>% 
    dplyr::select(item, domain, label, tau) %>% 
    mutate(domain = plyr::revalue(domain, c("cm" = "Communication", 
                                            "fm" = "Fine motor",
                                            "gm" = "Gross motor")))
  lms <- dscore::get_reference("dutch") %>% 
    mutate(month = age * 12) %>% 
    select(month, mu, sigma, nu, month)
  tab <- grid %>%
    left_join(ib, by = "item") %>%
    mutate(p = 100 * plogis(d, location = tau, scale = model$transform[2])) %>%
    filter(p > 1 & p < 99) %>%
    mutate(a = approx(x = lms$mu, 
                      y = lms$month, xout = d)$y) %>%
    tidyr::drop_na("a") %>%
    group_by(item)
  
  plot <- plotly::plot_ly(tab, x = ~a, y = ~d, z = ~p, color = ~domain, 
                          colors = scales::hue_pal()(3)) %>%
    plotly::add_lines() %>%
    plotly::hide_legend() %>% 
    plotly::layout(scene = list(xaxis = list(title = 'Age'),
                                yaxis = list(title = 'D'),
                                zaxis = list(title = '% pass'),
                                aspectratio = list(x = 1, y = 1, z = 0.5),
                                camera = list(
                                  up = list(
                                    x = 0,
                                    y = 1,
                                    z = 0
                                  ),
                                  eye = list(
                                    x = 0,
                                    y = 0,
                                    z = 2
                                  )
                                )
    )) %>% 
    plotly::layout(plot_bgcolor = 'transparent') %>% 
    plotly::layout(paper_bgcolor = 'transparent')
}

if (opts_knit$get("rmarkdown.pandoc.to") == "latex") {
  img <- magick::image_read(path = paste0("fig/scene", 1:3, ".pdf"))
  img[1] <- magick::image_scale(img[1], "550")
  orient3 <- magick::image_append(image = img)
  plot <- magick::image_write(orient3, "fig/scenes.pdf")
  plot <- include_graphics("fig/scenes.pdf")
}

if (!opts_knit$get("rmarkdown.pandoc.to") %in% c("html", "latex")) {
  plot <- include_graphics("fig/scenes.pdf")
}

plot
```

@fig-smoccdap shows the mutual relations between age, percentage of milestone passing and the D-score. There are three main orientations.

-   In the default orientation (age on the horizontal axis, D-score on the vertical axis), we see a curvilinear relation between the age and item difficulty.
-   Rotate the graph (age on the horizontal axis, passing percentage on the vertical axis). Observe that this is the same pattern as in \@fig-smoccpa (with *unequal slopes*). Curves are coloured by domain.
-   Rotate the graph (D-score on the horizontal axis, passing percentage on the vertical axis). Observe that this pattern is the same as in @fig-smoccpd (with *equal slopes*).

All patterns can co-exist because of the curvature in the relation between D-score and age. The curvature is never explicitly modelled or defined, but a consequence of the equal-slopes assumption in the relation between the D-score and the passing percentage of a milestone.

## D-score berekenen

Er zijn drie manieren om de D-score uit te rekenen:

### JAMES

::: {.callout-note}
Deze functionaliteit is met name waardevol bij het beoordelen van de ontwikkeling van **individuele kinderen**.
:::

Wanneer de JSON-data BDS-nummers bevat die corresponderen met het Van Wiechenschema, berekent JAMES **automatisch** de D-score. Dit gebeurt via de eerder besproken functie `james_post()`. De D-score en de DAZ (de op leeftijd gecorrigeerde D-score) worden teruggegeven in de `xyz`-component als rijen waarvoor `yname == "dsc"` geldt. Op deze manier is het ook mogelijk om een **D-score diagram** op te vragen voor een individueel kind.

De berekening zelf vindt plaats in de functie `bdsreader::read_bds()`, die intern `dscore::dscore()` aanroept. Raadpleeg de [broncode van `read_bds()`](https://github.com/growthcharts/bdsreader/blob/master/R/read_bds.R) voor technische details over de omzetting van BDS-codes naar het formaat dat geschikt is voor het `dscore`-pakket.

### D-score calculator

::: {.callout-note}
De D-score calculator is met name geschikt voor het eenmalig berekenen van de D-score en DAZ bij het beoordelen van de ontwikkeling van **groepen kinderen**.
:::

De [D-score calculator](https://tnochildhealthstatistics.shinyapps.io/dcalculator/) is een webapplicatie waarmee de D-score en DAZ kunnen worden berekend op basis van een **upload van een CSV-bestand** met kindgegevens.

De belangrijkste bottleneck bij het gebruik van de applicatie is het correct aanleveren van variabelenamen en coderingen. De app biedt hiervoor verschillende hulpmiddelen, waaronder de mogelijkheid om een voorbeeld-CSV te genereren met de juiste structuur en naamconventies. Dit bestand kan worden aangepast en vervolgens opnieuw geüpload. De applicatie valideert de input en geeft duidelijke waarschuwingen of foutmeldingen wanneer variabelen ontbreken of verkeerd zijn benoemd.

Daarnaast genereert de calculator desgewenst een D-scorediagram per kind. 

De app bevat een [korte instructievideo](https://youtu.be/GlnP3zaZCBE) met de belangrijkste stappen.

### D-score package

::: {.callout-note}
Het `dscore`-pakket is de meest geschikte optie voor het integreren van D-scoreberekeningen in een data-analysepipeline, zowel voor individuele kinderen als voor groepen kinderen.
:::

Het is ook mogelijk om de D-score te berekenen met de functie `james_post()`, mits de parameter `dscore` op `TRUE` is gezet. Dit is met name handig wanneer je D-scores wilt berekenen voor datasets die geen BDS-nummers bevatten.

Het [`dscore`-pakket](https://d-score.org/dscore/) vormt de basis van alle D-scoreberekeningen. Het is beschikbaar via CRAN en geldt als de [internationale standaard](https://journals.sagepub.com/doi/10.1177/01650254241294033) voor de D-score — niet alleen voor het Van Wiechenschema, maar ook voor ruim 20 andere instrumenten voor het meten van de ontwikkeling van jonge kinderen.

De belangrijkste stappen voor gebruik zijn te vinden in de handleiding [Getting started](https://d-score.org/dscore/articles/getting_started.html).

